version: "3.7"
services:

  eureka-service:
    image: eureka-service
    container_name: eureka-service
    build: 
      context: ./EurekaService
      dockerfile: Dockerfile
    tty: true
    networks:
      - static-network
    ports:
      - "8761:8761"
  
  # configuration-service:
  #   image: configuration-service
  #   container_name: configuration-service
  #   build: 
  #     context: ./ConfigurationService
  #     dockerfile: Dockerfile
  #   environment:
  #     REGISTRY_HOST: eureka-service
  #   tty: true
  #   restart: on-failure
  #   networks:
  #     - static-network
  #   ports:
  #     - "8888:8888"
  #   depends_on: 
  #     - eureka-service
  
  centralregistry-service:
    image: centralregistry-service
    container_name: centralregistry-service
    build: 
      context: ./CentralRegistryService
      dockerfile: Dockerfile
    tty: true
    restart: on-failure
    networks:
      - static-network
    ports:
      - "8083:8083"
    environment:
      REGISTRY_HOST: eureka-service
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: root
      DATABASE_DOMAIN: mysql-centralregistry
      DATABASE_SCHEMA: centralregistry_db?createDatabaseIfNotExist=true&serverTimezone=UTC
    depends_on: 
      - eureka-service
      - mysql-centralregistry

  counter-service:
    image: counter-service
    container_name: counter-service
    build: 
      context: ./CounterService
      dockerfile: Dockerfile
    tty: true
    restart: on-failure
    networks:
      - static-network
    ports:
      - "8084:8084"
    environment:
      REGISTRY_HOST: eureka-service
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: root
      DATABASE_DOMAIN: mysql-counter
      DATABASE_SCHEMA: counter_db?createDatabaseIfNotExist=true&serverTimezone=UTC
    depends_on: 
      - eureka-service
      - mysql-counter

  vehicle-service:
    image: vehicle-service
    container_name: vehicle-service
    build: 
      context: ./VehicleService
      dockerfile: Dockerfile
    tty: true
    restart: on-failure
    networks:
      - static-network
    ports:
      - "8085:8085"
    environment:
      REGISTRY_HOST: eureka-service
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: root
      DATABASE_DOMAIN: mysql-vehicle
      DATABASE_SCHEMA: vehicle_db?createDatabaseIfNotExist=true&serverTimezone=UTC
    depends_on: 
      - eureka-service
      - mysql-vehicle
  
  health-service:
    image: health-service
    container_name: health-service
    build: 
      context: ./HealthService
      dockerfile: Dockerfile
    tty: true
    restart: on-failure
    networks:
      - static-network
    ports:
      - "8086:8086"
    environment:
      REGISTRY_HOST: eureka-service
      DATABASE_NAME: healthdb
      DATABASE_DOMAIN: mongodb
      DATABASE_PORT: 27017
      MAIL_USERNAME: isa2019probni@gmail.com
      MAIL_PASSWORD: probnimail19
    depends_on: 
      - eureka-service
      - mongodb

  frontend:
    image: frontend
    container_name: frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    tty: true
    restart: on-failure
    networks:
      - static-network
    ports:
      - "3000:3000"

  # police-service:
  #   image: police-service
  #   container_name: police-service
  #   build: 
  #     context: ./PoliceService/PoliceService
  #     dockerfile: Dockerfile
  #   tty: true
  #   restart: on-failure
  #   networks:
  #     - static-network
  #   ports:
  #     - "8087:8087"
  #   environment:
  #     REGISTRY_HOST: eureka-service
  #     DATABASE_USERNAME: root
  #     DATABASE_PASSWORD: root
  #     DATABASE_DOMAIN: mysql-police
  #     DATABASE_SCHEMA: police_db?createDatabaseIfNotExist=true&serverTimezone=UTC
  #   depends_on: 
  #     - eureka-service
  #     - mysql-police

  zuul:
    image: zuul
    container_name: zuul
    build: 
      context: ./Zuul
      dockerfile: Dockerfile
    environment:
      REGISTRY_HOST: eureka-service
    tty: true
    networks:
      - static-network
    ports:
      - "8082:8082"
    depends_on:
      - eureka-service
      - centralregistry-service
      - counter-service
      - vehicle-service
      - health-service
      #- police-service

  mysql-centralregistry:
    image: mysql:8.0.19
    container_name: mysql-centralregistry
    restart: always
    networks:
      - static-network
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: centralregistry_db
    volumes:
      - db-data:/var/lib/mysql-centralregistry

  mysql-counter:
    image: mysql:8.0.19
    container_name: mysql-counter
    restart: always
    networks:
      - static-network
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: counter_db
    volumes:
      - db-data:/var/lib/mysql-counter

  mysql-vehicle:
    image: mysql:8.0.19
    container_name: mysql-vehicle
    restart: always
    networks:
      - static-network
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: vehicle_db
    volumes:
      - db-data:/var/lib/mysql-vehicle

  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    networks:
      - static-network
    command: --bind_ip_all
    volumes:
      - db-data:/var/lib/mongo-data
  
  # mysql-police:
  #   image: mysql:8.0.19
  #   container_name: mysql-police
  #   restart: always
  #   networks:
  #     - static-network
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_DATABASE: police_db
  #   volumes:
  #     - db-data:/var/lib/mysql-police

volumes:
  db-data:

networks:
  static-network:
    ipam:
      config:
        - subnet: 172.20.0.0/16
